# Ansible script to install dev environment dependencies
---
- hosts: all
  become: yes
  vars:
    host_user: vagrant
  vars_files:
    - github-user.yaml
  tasks:
    # https://github.com/do-community/ansible-playbooks/blob/master/docker_ubuntu1804/playbook.yml
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: "{{ lookup('file', 'files/apt-packages.txt').splitlines() }}"

    - name: Update all packages to their latest version
      apt:
        name: "*"
        state: latest
    
    - name: Install go
      snap:
        name: "{{ item }}"
        classic: yes
      loop: "{{ lookup('file', 'files/snap-packages.txt').splitlines() }}"

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest
    
    - name: Add user to 'docker' group
      user:
        name: "{{ host_user }}"
        shell: /usr/bin/zsh
        groups: docker, sudo, adm
        append: yes
        generate_ssh_key: yes
        ssh_key_type: ed25519
        ssh_key_file: .ssh/id_ed25519
        ssh_key_comment: "{{ github_email }}"

    - name: Copy user sudoers file
      template:
        src: host-user.j2
        dest: "/etc/sudoers.d/{{ host_user }}"
        mode: '0440'
    
    # https://ohmyz.sh/#install
    - name: Install oh-my-zsh
      script: install-ohmyzsh.sh --unattended
      args:
        chdir: "/home/{{ host_user }}"
        creates: "/home/{{ host_user }}/.oh-my-zsh"
      become: yes
      become_user: "{{ host_user }}"
    
    - name: Copy zsh profile
      template:
        src: zsh-profile.zsh.j2
        dest: "/home/{{ host_user }}/.oh-my-zsh/custom/zsh-profile.zsh"
        owner: "{{ host_user }}"
        group: "{{ host_user }}"
        mode: '0755'
   
    - name: Configure git
      command: 'git config --global {{ item }}'
      with_items:
        - 'user.email "{{ github_email }}"'
        - 'user.name "{{ github_username }}"'
      become: yes
      become_user: "{{ host_user }}"

    - name: Create ~/go/src/k8s.io/
      file:
        path: "/home/{{ host_user }}/go/src/k8s.io"
        state: directory
        owner: "{{ host_user }}"
        group: "{{ host_user }}"
        mode: '0755'
      become: yes
      become_user: "{{ host_user }}"

    # https://github.com/kubernetes/community/blob/master/contributors/guide/github-workflow.md
    - name: Clone forked Kubernetes repository
      git:
        repo: "https://github.com/{{ github_username }}/kubernetes.git"
        dest: "/home/{{ host_user }}/go/src/k8s.io/kubernetes"
        single_branch: yes
        version: master
        force: yes
      become: yes
      become_user: "{{ host_user }}"
  
    - name: Change repository URL
      command: git remote set-url origin "git@github.com:{{ github_username }}/kubernetes.git"
      args:
        chdir: "/home/{{ host_user }}/go/src/k8s.io/kubernetes"

    - name: Add upstream repository
      shell: git remote add upstream git@github.com:kubernetes/kubernetes.git || /bin/true
      args:
        chdir: "/home/{{ host_user }}/go/src/k8s.io/kubernetes"

    - name: Never push to upstream master
      command: git remote set-url --push upstream no_push
      args:
        chdir: "/home/{{ host_user }}/go/src/k8s.io/kubernetes"

    - name: Install etcd
      command: ./hack/install-etcd.sh
      args:
        chdir: "/home/{{ host_user }}/go/src/k8s.io/kubernetes"
        creates: "/home/{{ host_user }}/go/src/k8s.io/kubernetes/third_party/etcd"

    - name: Install CFSSL
      shell: go get -u github.com/cloudflare/cfssl/cmd/...
      args:
        chdir: "/home/{{ host_user }}/go/src/k8s.io/kubernetes"
        creates: "/home/{{ host_user }}/go/bin/cfssl"
      become: yes
      become_user: "{{ host_user }}"

    - name: Copy containerd kernel modules
      copy:
        src: containerd.conf
        dest: /etc/modules-load.d/containerd.conf
   
    - name: Copy sysctl params for k8s cri
      copy:
        src: 99-kubernetes-cri.conf
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
    
    - name: Load kernel modules
      command: sysctl --system
    
    - name: Apply default containerd configuration
      shell: containerd config default | sudo tee /etc/containerd/config.toml
    
    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
